import Thresh, { Bridge, ui, Util } from 'thresh-lib'
import { ThreshProvider } from 'thresh-lib/src/types/type'
import { Span, Shadow, Border } from 'thresh-lib/src/types/widget'
// TODO - mock 数据，发布 npm 前需要注释掉
// import mockData from './src/mock'

interface BaseThemeData {
  [themeKey: string]: any
}

// 原始的主题数据
interface OriginThemeData {
  // status
  normal?: OriginThemeData
  selected?: OriginThemeData
  touch?: OriginThemeData // not effect
  disable?: OriginThemeData
  custom?: OriginThemeData // not effect

  // styles
  backgroundColor?: string
  titleColor?: string // only effect in Text
  textColor?: string // only effect in Text
  highlightedTextColor?: string // not effect
  borderColor?: string
  shadowColor?: string // only effect in Text
  secondColor?: string // not effect - what is this mean?
  tintColor?: string
  fontSize?: number // only effect in Text
  fontWeight?: string // only effect in Text
  image?: string // only effect in Image
  backgroundImage?: string // not effect
  highlightedImage?: string // not effect

  attributedText?: string // only effect in Text
}

// 原始的主题包
interface OriginThemeBundle {
  [themeKey: string]: OriginThemeData | BaseThemeData
}

// 原始的主题包集合
interface OriginThemeBundleCollection {
  [themeName: string]: OriginThemeBundle
}

// 可使用的主题数据
interface ThemeData {
  backgroundColor?: number | void
  color?: number | void // from titleColor & textColor
  border?: Border | void // from borderColor
  shadow?: Shadow | void // from shadowColor
  tintColor?: number | void
  size?: number | void // from fontSize
  weight?: string | void // from fontSize
  src?: string | void // from image
  richText?: Span[] | void // from attributedText
}

type ThemeStatusType = 'normal' | 'disable' | 'selected'
interface ThemeStatus {
  normal?: ThemeData
  disable?: ThemeData
  selected?: ThemeData
}

// 可使用的主题包
interface ThemeBundle {
  [themeKey: string]: ThemeStatus | BaseThemeData
}

// 可使用的主题包集合
interface ThemeBundleCollection {
  [themeName: string]: ThemeBundle
}

interface AttributedTextItem {
  text: string
  isFontTag: boolean
}

const SETIN_IMAGE_PREFIX = 'mbtp://'
const BASE_THEME_DATA_KEY = 'base_common'
const FONT_TAG_REG_GLOBAL = /<font[^>]*>([^<]*)<\/font>/g
const FONT_TAG_REG = /<font([^>]*)>([^<]*)<\/font>/

class ThemeProvider implements ThreshProvider {
  static defaultShadow: Shadow = {
    color: 0xff000000,
    offsetX: 1,
    blur: 2,
  }
  currentThemeName: string = ''
  themeFolderRootPath: string = ''
  filePathPrefix: string = ''
  private themeBundleCollection: ThemeBundleCollection = {}

  propsProvider(props: any) {
    if (!this.currentThemeName) return props
    const { themeKey, disabled, disable, selected } = props || {}
    if (!themeKey) return
    let themeStatusType: ThemeStatusType = 'normal'
    if (disabled || disable) themeStatusType = 'disable'
    else if (selected) themeStatusType = 'selected'
    const themeData: ThemeData | void = this.getThemeData(themeKey, themeStatusType)
    if (!themeData) return
    return Object.assign(props || {}, themeData)
  }

  async load(): Promise<boolean> {
    const res = await Bridge.invoke({
      module: 'app',
      business: 'base',
      method: 'getThemeInfo'
    })
    if (!res || res.code !== 0 || !res.data.themes) return false
    this.themeFolderRootPath = res.data.themeFolderRootPath || ''
    this.filePathPrefix = res.data.filePathPrefix === 'assets' ? 'assets://' : ''
    const loadedThemeBundleCollection: OriginThemeBundleCollection = res.data.themes

    // TODO - mock 数据，发布 npm 前需要注释掉
    // this.themeFolderRootPath = 'assets/xray'
    // const loadedThemeBundleCollection: OriginThemeBundleCollection = mockData

    this.themeBundleCollection = this.transformOriginThemeBundleCollection(loadedThemeBundleCollection)
    this.use('default')
    if (Thresh.debugMode) {
      let themeNames = []
      for (let key in this.themeBundleCollection) {
        themeNames.push(key)
      }
      Util.log('===== load theme bundle collection success =====', themeNames.join(', '))
    }
    return true
  }

  async loadAndUse(themeName: string): Promise<boolean> {
    const loadSuccess = await this.load()
    if (!loadSuccess) return loadSuccess
    const switchSuccess = this.use(themeName)
    return switchSuccess
  }

  use(themeName: string): boolean {
    if (!themeName) return false
    if (this.themeBundleCollection[themeName]) {
      this.currentThemeName = themeName
      return true
    }
    return false
  }

  /**
   * 获取当前或指定主题包中的指定主题字段
   */
  getThemeData(themeKey: string, themeStatusType: ThemeStatusType = 'normal', themeName?: string): ThemeData | void {
    if (!themeName && !this.currentThemeName) return
    const themeBundle: ThemeBundle = this.themeBundleCollection[themeName || this.currentThemeName] || {}
    const themeData: ThemeData | BaseThemeData | void = themeBundle[themeKey]
    if (!themeData) return
    return themeData[themeStatusType]
  }

  /**
   * 获取当前或指定主题包中的 base_common 内容
   */
  getBaseCommonData(themeName?: string): BaseThemeData {
    if (!themeName && !this.currentThemeName) return
    const themeBundle: ThemeBundle = this.themeBundleCollection[themeName || this.currentThemeName] || {}
    return themeBundle[BASE_THEME_DATA_KEY] || {}
  }

  /**
   * 将原始的主题包集合数据转为可使用的主题包集合数据
   */
  private transformOriginThemeBundleCollection(originThemeBundleCollection: OriginThemeBundleCollection): ThemeBundleCollection {
    const themeBundleCollection: ThemeBundleCollection = {}
    for (let themeName in originThemeBundleCollection) {
      const originThemeBundle: OriginThemeBundle = originThemeBundleCollection[themeName]
      themeBundleCollection[themeName] = this.transformOriginThemeBundle(originThemeBundle, themeName)
    }
    return themeBundleCollection
  }
  /**
   * 将原始的主题包数据转为可使用的主题包数据
   */
  private transformOriginThemeBundle(originThemeBundle: OriginThemeBundle, themeName: string): ThemeBundle {
    const themeBundle: ThemeBundle = {}
    themeBundle[BASE_THEME_DATA_KEY] = this.transformOriginBaseThemeData(originThemeBundle[BASE_THEME_DATA_KEY])
    for (let themeKey in originThemeBundle) {
      if (themeKey === BASE_THEME_DATA_KEY) continue
      const originThemeData: OriginThemeData = originThemeBundle[themeKey]
      themeBundle[themeKey] = this.transformOriginThemeStatus(originThemeData, themeName)
    }
    return themeBundle
  }
  /**
   * 将原始的主题状态数据转为可使用的主题状态数据
   */
  private transformOriginBaseThemeData(originBaseThemeData: BaseThemeData): BaseThemeData {
    if (!originBaseThemeData) return {}
    const baseThemeData: BaseThemeData = {}
    for (let baseThemeKey in originBaseThemeData) {
      const value = originBaseThemeData[baseThemeKey]
      // 先对 value 进行色值转换
      // 如果不能转换为色值则进行 size 转换
      // 如果不能进行 size 转换则使用原值
      let transformedValue = this.transformColorValue(value)
      if (!transformedValue) transformedValue = this.transformSizeValue(value)
      if (!transformedValue) transformedValue = value
      baseThemeData[baseThemeKey] = transformedValue
    }
    return baseThemeData
  }
  /**
   * 将原始的主题状态数据转为可使用的主题状态数据
   */
  private transformOriginThemeStatus(originThemeData: OriginThemeData, themeName: string): ThemeStatus {
    const themeStatus: ThemeStatus = {}
    themeStatus.normal = this.transformOriginThemeData(originThemeData.normal || originThemeData, themeName)
    themeStatus.disable = this.transformOriginThemeData(originThemeData.disable, themeName)
    themeStatus.selected = this.transformOriginThemeData(originThemeData.selected, themeName)
    return themeStatus
  }
  /**
   * 将原始的主题数据转为可使用的主题数据
   */
  private transformOriginThemeData(originThemeData: OriginThemeData, themeName: string): ThemeData {
    if (!originThemeData) return {}
    let themeData: ThemeData = {}
    if (originThemeData.backgroundColor) themeData.backgroundColor = this.transformColorValue(originThemeData.backgroundColor)
    if (originThemeData.titleColor) themeData.color = this.transformColorValue(originThemeData.titleColor)
    if (originThemeData.textColor) themeData.color = this.transformColorValue(originThemeData.textColor)
    if (originThemeData.borderColor) themeData.border = this.transformBorderValue(originThemeData.borderColor)
    if (originThemeData.shadowColor) themeData.shadow = this.transformShadowValue(originThemeData.shadowColor)
    if (originThemeData.tintColor) themeData.tintColor = this.transformColorValue(originThemeData.tintColor)
    if (originThemeData.fontSize) themeData.size = this.transformSizeValue(originThemeData.fontSize)
    if (originThemeData.fontWeight) themeData.weight = originThemeData.fontWeight
    if (originThemeData.image) themeData.src = this.transformImageValue(originThemeData.image, themeName)
    // 异步解析富文本
    if (originThemeData.attributedText) {
      Promise.resolve().then(() => {
        themeData.richText = this.transformAttributedText(originThemeData.attributedText, themeName)
      })
    }
    return themeData
  }

  /**
   * 颜色值转换
   */
  transformColorValue(colorValue: string): number | void {
    if (!colorValue) return
    colorValue = colorValue.replace('#', '')
    let numberColor
    if (colorValue.length <= 6) numberColor = Number(`0xff${colorValue}`)
    else {
      const rgbColor = colorValue.substr(0, 6)
      let alphaValue = colorValue.substr(6, 2)
      if (alphaValue.length !== 2) alphaValue += 'f'
      numberColor = Number(`0x${alphaValue}${rgbColor}`)
    }
    if (!isNaN(numberColor)) return numberColor
  }

  /**
   * size 值转换
   */
  transformSizeValue(sizeValue: number | string): number {
    if (typeof sizeValue === 'string') sizeValue = Number(sizeValue)
    if (isNaN(sizeValue) || !sizeValue) return 0
    return this.getRpx(sizeValue)
  }
  /**
   * 富文本转换
   */
  transformAttributedText(attributedText: string, themeName?: string): Span[] {
    const textItems = attributedText.match(FONT_TAG_REG_GLOBAL)
    if (!textItems || !textItems.length) return [{ text: attributedText }]
    let splitedAttributedTextItems: AttributedTextItem[] = []
    for (let i in textItems) {
      const textItem = textItems[i]
      const temp = attributedText.split(textItem)
      const firstItem = temp.shift()
      attributedText = temp.join('')
      if (firstItem) {
        splitedAttributedTextItems.push({ text: firstItem, isFontTag: false })
      }
      splitedAttributedTextItems.push({ text: textItem, isFontTag: true })

      // {{ fix 'aaa<font>xxxx</font>bbb' bbb丢失, by xw 2021/0/07
      if (parseInt(i) === textItems.length - 1) {
        const lastItem = temp.pop()
        if (lastItem) {
          splitedAttributedTextItems.push({ text: lastItem, isFontTag: false })
        }
      }
      // }}
    }
    const res = splitedAttributedTextItems.map(item => parseAttributedTextItem(item, themeName || this.currentThemeName)).filter(item => !!item)
    return res as Span[]
  }
  /**
   * 内置图片转换
   */
  private transformImageValue(imageValue: string, themeName: string): string {
    if (!imageValue) return ''
    if (!imageValue.startsWith(SETIN_IMAGE_PREFIX)) return imageValue
    return imageValue.replace(SETIN_IMAGE_PREFIX, `${this.filePathPrefix}${this.themeFolderRootPath}/${themeName}/resource/`)
  }
  /**
   * border 转换
   */
  private transformBorderValue(borderColor: string): Border {
    const color = this.transformColorValue(borderColor)
    if (!color) return
    return {
      color,
      width: this.getRpx(1),
    }
  }
  /**
   * shadow 转换
   */
  private transformShadowValue(shadowColor: string): Shadow {
    return Object.assign(
      {},
      ThemeProvider.defaultShadow,
      { color: this.transformColorValue(shadowColor) }
    )
  }

  /**
   * 计算 rpx
   */
  private getRpx(size: number) {
    if (!ui.screenWidth) return size
    return ui.rpx(size)
  }
}

function parseAttributedTextItem(attributedTextItem: AttributedTextItem, themeName: string): Span | void {
  const attributedText = attributedTextItem.text
  if (!attributedTextItem.isFontTag) return { text: attributedText }
  const matchRes = attributedText.match(FONT_TAG_REG)
  if (!matchRes) return
  const styles = matchRes[1].trim()
  const text = matchRes[2]
  if (!text) return
  let parseRes: Span = { text }
  if (!styles) return parseRes
  let styleItems = []
  styles.split(' ').forEach(style => {
    if (style.includes('=')) {
      styleItems = styleItems.concat(style.split('='))
    }
  })
  let color
  let size
  let weight
  let mbColor
  let item = styleItems.shift()
  while (item) {
    if (item === 'color') {
      let colorValue = styleItems.shift()
      if (colorValue) {
        // 去掉字符串前后引号
        colorValue = removeStartAndEndQuotations(colorValue)
        color = themeProvider.transformColorValue(colorValue)
      }
    }
    if (item === 'size') {
      let sizeValue = styleItems.shift()
      if (sizeValue) {
        // 去掉字符串前后引号
        sizeValue = removeStartAndEndQuotations(sizeValue)
        size = themeProvider.transformSizeValue(sizeValue)
      }
    }
    if (item === 'weight') {
      let weightValue = styleItems.shift()
      if (weightValue) {
        // 去掉字符串前后引号
        weight = removeStartAndEndQuotations(weightValue)
      }
    }
    if (item === 'MBColor' && themeName) {
      let mbColorValue = styleItems.shift()
      if (mbColorValue) {
        // 去掉字符串前后引号
        mbColorValue = removeStartAndEndQuotations(mbColorValue)
        const themeData: ThemeData | void = themeProvider.getThemeData(mbColorValue, 'normal', themeName)
        if (themeData && themeData.color) mbColor = themeData.color
      }
    }
    item = styleItems.shift()
  }
  if (size) parseRes.size = size
  if (color) parseRes.color = color
  if (weight) parseRes.weight = weight
  if (mbColor) parseRes.color = mbColor
  return parseRes
}

function removeStartAndEndQuotations(targetString: string) {
  return targetString.substr(1, targetString.length - 2)
}

const themeProvider: ThemeProvider = new ThemeProvider()
export default themeProvider
